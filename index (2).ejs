<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document Title</title>
    <link rel="stylesheet" href="./style.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Bungee+Spice&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
</head>
<body>
    <video autoplay loop muted id="background-video">
        <source src="./HomeFire.Routing Background 2.mp4" type="video/mp4">
    </video>

    <div id="ejsdiv">
        <div class="ticketDiv-Parent">
            <div class="ticketDiv readyForPickup">
                <h1>Ready For Pickup</h1>
                <div id="readyForPickupOrders">
                    <% if (orders.length === 0 || !orders.some(order => order.status === "ready for pickup")) { %>
                        <p>No orders available.</p>
                    <% } else { %>
                        <% orders.filter(order => order.status === "ready for pickup").forEach(function(order) { %>  
                            <div class="liveOrders">
                                <ul><%= order.ticketName %></ul>
                                <ul><%= order.items %></ul>
                                <ul><%= order.createdAtEST %></ul>
                            </div>
                        <% }); %>
                    <% } %>
                </div>
            </div>

            <div class="ticketDiv inOven middleDiv">
                <h1>In The Oven</h1>
                <div id="inOvenOrders">
                    <% if (orders.length === 0 || !orders.some(order => order.status === "in the oven")) { %>
                        <p>No orders available.</p>
                    <% } else { %>
                        <% orders.filter(order => order.status === "in the oven").forEach(function(order) { %>  
                            <div class="liveOrders">
                                <ul><%= order.ticketName %></ul>
                                <ul><%= order.items %></ul>
                                <ul><%= order.createdAtEST %></ul>
                            </div>
                        <% }); %>
                    <% } %>
                </div>
            </div>

            <div class="ticketDiv prePrep">
                <h1>Orders</h1>
                <div id="prePrepOrders">
                    <% if (orders.length === 0 || !orders.some(order => order.status === "pending")) { %>
                        <p>No orders available.</p>
                    <% } else { %>
                        <% orders.filter(order => order.status === "pending").forEach(function(order) { %>  
                            <div class="liveOrders">
                                <ul><%= order.ticketName %></ul>
                                <ul><%= order.items %></ul>
                                <ul><%= order.createdAtEST %></ul>
                            </div>
                        <% }); %>
                    <% } %>
                </div>
            </div>
        </div>
    </div>

<script src="/socket.io/socket.io.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const socket = io({
            reconnection: true,
            reconnectionAttempts: Infinity,
            reconnectionDelay: 1000,
            reconnectionDelayMax: 5000
        });

        socket.on('connect', () => {
            console.log('Connected to server');
        });

        socket.on('orders-updated', function(orders) {
            console.log('Received updated orders:', orders);
            renderOrders(orders);
        });

        socket.on('order-update', function(data) {
            console.log('Received order update:', data);
            renderSingleOrderUpdate(data); 
        });

        socket.on('disconnect', () => {
            console.log('Disconnected from server');
        });

        function renderOrders(orders) {
            const statusMapping = {
                'pending': 'prePrepOrders', // ID of the container for pending orders
                'in the oven': 'inOvenOrders', // ID of the container for in the oven orders
                'ready for pickup': 'readyForPickupOrders' // ID of the container for ready for pickup orders
            };

            Object.keys(statusMapping).forEach(status => {
                const containerId = statusMapping[status];
                const container = document.getElementById(containerId); // Use getElementById to select the container

                if (!container) {
                    console.error("No container found for status:", status);
                    return; // Skip this iteration if container not found
                }

                container.innerHTML = ''; // Now safe to clear the container

                orders.filter(order => order.status === status).forEach(order => {
                    const orderDiv = document.createElement('div');
                    orderDiv.className = 'liveOrders';
                    orderDiv.innerHTML = `
                        <ul>${order.ticketName || 'Unknown'}</ul>
                        <ul>${order.items || 'No items'}</ul>
                        <ul>${order.createdAtEST || 'Unknown time'}</ul>
                    `;
                    container.appendChild(orderDiv);
                });
            });
        }




        function renderSingleOrderUpdate(data) {
            
        }
    });
</script>
</body>
</html>